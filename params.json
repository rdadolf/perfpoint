{"name":"Perfpoint","tagline":"Flexible performance counter sampling","body":"## Should I use perfpoint?\r\n\r\nIt depends. If you're just looking for a way to read hardware performance counters, probably not. Linux's perf tool already does that reasonably well. The documentation is somewhat sparse, but it likely does what you want.\r\n\r\nPerfpoint solves a slightly more specific problem which perf has problems with: triggering hardware counters reads every *n* instructions. Actually, perf *can* handle this in some situations using something called counter groups. Unfortunately, counter groups suffer from some restrictions on when and how you can use them, including disallowing sampling from different PMUs. Perfpoint is effectively a manual workaround for this. It triggers interrupts using a free-running instruction counter and records another arbitrary counter on wakeup. The end result is a set of performance counter samples at regular, user-specified intervals.\r\n\r\n## What's included?\r\n\r\nThe primary tool is `perfpoint`, a command-line tool that lets you read a hardware counter every *n* instructions. Run it without any options to get usage. Note: you'll really need to understand some of the details of how Linux's perf interface works to use it, since specifying a harware counter requires some arcane knowledge.\r\n\r\nDue to hardware limitations, you can't keep track of more than a handful of counters. One solution is to assume determinism and run your program several times, recording different counters every time. Because programs *aren't* completely deterministic, we have to do some clean-up afterwards. The `align.py` script takes care of this. Again, run the program without arguments to get usage.\r\n","google":"UA-29492860-3","note":"Don't delete this file! It's used internally to help with page regeneration."}